package assign2;

import java.util.HashMap;
import java.util.Scanner;

public class TestAssembledPart 
{
	static HashMap<String, Part> partsList = new HashMap<String, Part>(); 

	public static void main(String args[])
	{
		Part p101 = new Part ("p101", "Crank", 218, 12.2);
		Part p102 = new Part ("p102", "Pedal", 320, 14.3);
		Part p103 = new Part ("p103", "Handlebar", 120, 35.5);
		Part p104 = new Part ("p104", "Stem", 90, 20.0);

		AssembledPart p183 = new AssembledPart ("p183", "Crank-Pedal", 80, 3.5, p101, p102);
		AssembledPart p184 = new AssembledPart ("p184", "Handle-bar-Stem", 30, 1.5, p103, p104);

		partsList.put(p101.getID(),p101);
		partsList.put(p102.getID(),p102);
		partsList.put(p103.getID(),p103);
		partsList.put(p104.getID(),p104);

		partsList.put(p183.getID(),p183);
		partsList.put(p184.getID(),p184);

		while(isRunning)
		{
			Scanner userInput = new Scanner(System.in);
			System.out.println("Enter ID operation (either R for replenish or S for supply"
					+ " and quantity.");
			String userInputString = userInput.nextLine();

			if (userInputString.equalsIgnoreCase(""))
			{
				isRunning = false;
			}
			else
			{
				String[] splitString = userInputString.split(" ");

				if(checkForPartByID(splitString[0]))
				{
					for (ID : partsList.get(ID).getID())
					{
						return partsList.get(ID).getID();
					}
					
					switch (splitString[0])
					{
					case "R":
						partsList.get(splitString[1]).replenish(Integer.parseInt(splitString[2]));
						System.out.println("New Stock level for "
								+ splitString[1] + " (" 
								+ partsList.get(splitString[1]).getName() + ") is "
								+ partsList.get(splitString[1]).getStockLevel());
						break;
					case "S": 
						partsList.get(splitString[1]).supply(Integer.parseInt(splitString[2]));
						System.out.println("New Stock level for "
								+ splitString[1] + " (" 
								+ partsList.get(splitString[1]).getName() + ") is "
								+ partsList.get(splitString[1]).getStockLevel());
						break;

					default:

						System.out.println("invaild string");
						break;
					}
				}
				else
				{
					System.out.println("No part found with ID " 
							+ splitString[1]
									+ ". ");
				}
			}
		}		
	}


	public void testingAssemblyPart()
	{
		// Constructing two Part objects (the base parts)
		Part part0 = new Part("p101", "Crank", 218, 12.2);
		Part part1 = new Part ("p102", "Pedal", 320, 14.3);

		//Constructing AssembledPart object assembled from p101 & p102.
		AssembledPart part2 = new AssembledPart ("p183", 
				"Crank & Pedal", 80, 3.5, part0, part1);
		//Replenish stock by 100 items.
		part2.replenish(100);

		//Supplying the maximum possible assembled parts - combination
		//of existing parts and base parts available for assembly.
		System.out.println("Supplying max number of (assembled) part");
		int totalAvail = part2.getStockLevel()
				+ part2.getAvailForAssembly();
		double cost = part2.supply(totalAvail);
		if (cost > 0)
		{
			System.out.println(part2.getID() + " Total cost for "
					+ totalAvail + " items = " + cost); 
		}
		else
			System.out.println(part2.getID()
					+ " Insufficient parts to supply " + totalAvail);

		//Printing the stock level for assembled and base parts.
		System.out.println(part0.getID() + " (base part) Available qty = "
				+ part0.getStockLevel());
		System.out.println(part1.getID() + " (base part) Available qty = "
				+ part1.getStockLevel());
		System.out.println(part2.getID() + " (base part) Available qty = "
				+ part2.getStockLevel());

		//Attempt to supply another 10 items (bound to fail).
		System.out.println("Trying to supply another 10 parts");
		int qty = 10;
		cost = part2.supply(qty);
		if (cost > 0)
			System.out.println(part2.getID() + "Total cost for " + qty
					+ " items = " + cost);
		else
			System.out.println(part2.getID()
					+ " Insufficient parts to supply " + qty);
	}
}
